//
//  AddIncomeExpenseScreenView.swift
//  MoneyManager
//
//  Created Tin Tun Aung on 21/01/2020.
//  Copyright Â© 2020 Tin Tun Aung. All rights reserved.
//
//  Template generated by Tin Tun Aung
//
import Foundation
import UIKit

class AddIncomeExpenseScreenView: UIViewController {
    //Title Labels
    @IBOutlet weak var categoryTitleLabel: UILabel!
    @IBOutlet weak var dateTitleLabel: UILabel!
    @IBOutlet weak var amountTitleLabel: UILabel!
    @IBOutlet weak var noteTitleLabel: UILabel!
    
    //Error Labels
    @IBOutlet weak var categoryErrorLabel: UILabel!
    @IBOutlet weak var dateErrorLabel: UILabel!
    @IBOutlet weak var amountErrorLabel: UILabel!
    @IBOutlet weak var noteErrorLabel: UILabel!
    
    //Textfields
    @IBOutlet weak var categoryTF: UITextField!
    @IBOutlet weak var dateTF: UITextField!
    @IBOutlet weak var amountTF: UITextField!
    @IBOutlet weak var noteTF: UITextField!
    
    @IBOutlet weak var saveBtn: UIButton!
    var presenter: AddIncomeExpenseScreenViewToPresenterProtocol?

    override func viewDidLoad() {
        super.viewDidLoad()
        presenter?.started()
    }
    
    @IBAction func clickSaveBtn(_ sender: UIButton) {
        if AppStates.shared.setIncome {
            presenter?.clickSaveButton(type: "Income", category: categoryTF.stringValue, date: dateTF.stringValue, amount: amountTF.stringValue, note: noteTF.stringValue)
        } else {
            presenter?.clickSaveButton(type: "Expense", category: categoryTF.stringValue, date: dateTF.stringValue, amount: amountTF.stringValue, note: noteTF.stringValue)
        }
    }
    
    @objc func dateButtonClick(_ sender: UIButton) {
        presenter?.clickDateButton()
    }
    
    @objc func categoryButtonClick(_ sender: UIButton) {
        presenter?.clickCategoryButton()
    }
}

// MARK: - UISetup
extension AddIncomeExpenseScreenView {
    private func setup() {
        defaultUI()
        hideErrorLabel()
        buttonSetup()
        textfieldSetup()
    }
    
    private func defaultUI() {
        self.navigationController?.navigationStyle()
        self.navigationItem.backButtonStyle()
        setAndCheckTitle()
        saveBtn.setShadowStyle()
    }
    
    private func setAndCheckTitle() {
        if AppStates.shared.setIncome {
            self.title = ScreenName.addIncome
            return
        }
        self.title = ScreenName.addExpense
    }
    
    private func hideErrorLabel() {
        categoryErrorLabel.isHidden = true
        dateErrorLabel.isHidden = true
        amountErrorLabel.isHidden = true
        noteErrorLabel.isHidden = true
    }
    
    private func buttonSetup() {
        categoryButton()
        dateButton()
    }
    
    private func categoryButton() {
        let categoryButton = UIButton()
        categoryTF.addButton(button: categoryButton, image: #imageLiteral(resourceName: "forward"))
        categoryButton.addTarget(self, action: #selector(categoryButtonClick(_:)), for: .touchUpInside)
    }
    
    private func dateButton() {
        let dateButton = UIButton()
        dateTF.addButton(button: dateButton, image: #imageLiteral(resourceName: "calendarWithTime"))
        dateButton.addTarget(self, action: #selector(dateButtonClick(_:)), for: .touchUpInside)
    }
    
    private func textfieldSetup() {
        categoryTF.incomeExpenseTextFieldStyle()
        dateTF.incomeExpenseTextFieldStyle()
        amountTF.incomeExpenseTextFieldStyle()
        noteTF.incomeExpenseTextFieldStyle()
        categoryTF.delegate = self
        dateTF.delegate = self
        amountTF.delegate = self
        noteTF.delegate = self
    }
    
    func clearTextfeilds() {
        categoryTF.text = Constants.emptyString
        dateTF.text = Constants.emptyString
        noteTF.text = Constants.emptyString
        amountTF.text = Constants.emptyString
    }
}

// MARK: - Presenter to View
extension AddIncomeExpenseScreenView: AddIncomeExpenseScreenPresenterToViewProtocl {
    func showAlertBox() {
        alertBox {
            self.clearTextfeilds()
        }
    }
    
    func allTextfieldsAreEmpty() {
        categoryErrorLabel.text = "Category is Required!"
        categoryErrorLabel.isHidden = false
        dateErrorLabel.text = "Date is Required!"
        dateErrorLabel.isHidden = false
        amountErrorLabel.text = "Amount is Required!"
        amountErrorLabel.isHidden = false
        noteErrorLabel.text = "Note is Required!"
        noteErrorLabel.isHidden = false
    }
    
    func categoryTextFieldIsEmpty() {
        categoryErrorLabel.text = "Category is Required!"
        categoryErrorLabel.isHidden = false
    }
    
    func dateTextfieldIsEmpty() {
        dateErrorLabel.text = "Date is Required!"
        dateErrorLabel.isHidden = false
    }
    
    func amountTextfieldIsEmpty() {
        amountErrorLabel.text = "Amount is Required!"
        amountErrorLabel.isHidden = false
    }
    
    func noteTextfieldIsEmpty() {
        noteErrorLabel.text = "Note is Required!"
        noteErrorLabel.isHidden = false
    }
    
    func showDatePicker() {
        let vc = SelectDateViewController(nibName: NibName.selectDateNib, bundle: nil)
        vc.delegate = self
        vc.modalPresentationStyle = .overCurrentContext
        vc.modalTransitionStyle = .crossDissolve
        self.present(vc, animated: true)
    }

    func initialControlSetup() {
        setup()
    }

}

extension AddIncomeExpenseScreenView: SelectDateDelegate {
    func didSelectDate(_ selectedDate: Date) {
        self.dateTF.text = selectedDate.formatter()
        self.dateErrorLabel.isHidden = true
    }

    func didPressButton(_ button: UIButton!) {
        UIView.animate(withDuration: 0.5) {
            self.view.endEditing(true)
        }
    }
}

extension AddIncomeExpenseScreenView: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        switch textField {
        case amountTF:
            guard CharacterSet(charactersIn: Constants.numbers).isSuperset(of: CharacterSet(charactersIn: string)) else { return false }
        default:
            printDebug("Others")
        }
        return true
    }
    


    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        switch textField {
        case dateTF:
            return false
        default:
            return true
        }
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == categoryTF {
            categoryErrorLabel.isHidden = true
            return
        }
        if textField == amountTF {
            amountErrorLabel.isHidden = true
            return
        }
        if textField == noteTF {
            noteErrorLabel.isHidden = true
            return
        }
    }
}

extension AddIncomeExpenseScreenView: SelectCategoryDelegate {
    func selectCategory(_ categoryName: String) {
        categoryTF.text = categoryName
        categoryErrorLabel.isHidden = true
    }
}
